using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace TCP
{
    public partial class ServerForm : Form
    {
        TcpListener tcpListener;
        TcpClient tcpClient;

        public ServerForm()
        {
            InitializeComponent();
        }

        private async void btnStartServer_Click(object sender, EventArgs e)
        {
            int port = int.Parse(txtServerPort.Text);
            tcpListener = new TcpListener(IPAddress.Any, port);

            // Start listening for incoming connections asynchronously
            tcpListener.Start();
            WriteLog($"Server started on port {port}");

            // Accept incoming connections in a loop
            while (true)
            {
                try
                {
                    tcpClient = await tcpListener.AcceptTcpClientAsync();

                    // Handle the accepted client in a separate method
                    Task.Run(() => HandleClient(tcpClient));
                }
                catch (Exception ex)
                {
                    // Handle exceptions
                    WriteLog($"Error: {ex.Message}");
                }
            }
        }

        private async Task HandleClient(TcpClient client)
        {
            // Get the stream for reading and writing data
            NetworkStream stream = client.GetStream();

            // Buffer for receiving data
            byte[] buffer = new byte[1024];

            while (true)
            {
                try
                {
                    // Read incoming data
                    int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);

                    if (bytesRead == 0)
                    {
                        // Connection closed by the client
                        break;
                    }

                    // Convert the received bytes to a string
                    string receivedMessage = Encoding.UTF8.GetString(buffer, 0, bytesRead);

                    // Handle the received message
                    HandleMessage(receivedMessage);

                    // Log the received message
                    WriteLog($"Received: {receivedMessage}");
                }
                catch (Exception ex)
                {
                    // Handle exceptions
                    WriteLog($"Error: {ex.Message}");
                    break;
                }
            }

            // Clean up the client connection
            client.Close();
        }

        private void HandleMessage(string message)
        {
            // Implement your logic to handle the received message here
        }

        private void WriteLog(string msg)
        {
            MethodInvoker invoker = new MethodInvoker(delegate
            {
                txtLog.Text += $"Server Response: {msg}{Environment.NewLine}";
            });

            this.BeginInvoke(invoker);
        }
    }
}
